{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","getReorderedGoods","goods","sortType","isReversed","visibleGoods","sort","good1","good2","ALPABET","localeCompare","LENGTH","length","reverse","App","useState","setReversed","NONE","setType","updateSortType","type","className","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAcK,SAASC,EACdC,EADK,GAGJ,IADCC,EACF,EADEA,SAAUC,EACZ,EADYA,WAENC,EAAY,YAAOH,GAmBzB,OAjBAG,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQL,GACN,KAAKJ,EAASU,QACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKT,EAASY,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAITR,GACFC,EAAaQ,UAGRR,G,SAlCJN,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KAqCE,IAAMe,EAAgB,WAC3B,MAAkCC,oBAAS,GAA3C,mBAAOX,EAAP,KAAmBY,EAAnB,KACA,EAA4BD,mBAAShB,EAASkB,MAA9C,mBAAOd,EAAP,KAAiBe,EAAjB,KAMMC,EAAiB,SAACC,GACtBF,EAAQE,IAQV,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACED,KAAK,SACLC,UAAWC,IACT,kBACA,CAAE,WAAYnB,IAAaJ,EAASU,UAEtCc,QAAS,kBAAMJ,EAAepB,EAASU,UANzC,iCAWA,wBACEW,KAAK,SACLC,UAAWC,IACT,oBACA,CAAE,WAAYnB,IAAaJ,EAASY,SAEtCY,QAAS,kBAAMJ,EAAepB,EAASY,SANzC,4BAWA,wBACES,KAAK,SACLC,UAAWC,IACT,oBACA,CAAE,YAA2B,IAAflB,IAEhBmB,QA5Cc,WACpBP,GAAaZ,IAqCT,sBAWED,IAAaJ,EAASkB,MAAQb,IAC9B,wBACEgB,KAAK,SACLC,UAAU,4BACVE,QA7CU,WAClBP,GAAY,GACZE,EAAQnB,EAASkB,OAwCX,sBASJ,6BACGhB,EAAkBD,EAAiB,CAAEI,aAAYD,aAC/CqB,KAAI,SAACC,GAAD,OACH,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YCvHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.08f30bd0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((good1, good2) => {\n    switch (sortType) {\n      case SortType.ALPABET:\n        return good1.localeCompare(good2);\n\n      case SortType.LENGTH:\n        return good1.length - good2.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setReversed] = useState(false);\n  const [sortType, setType] = useState(SortType.NONE);\n\n  const handleReverse = () => {\n    setReversed(!isReversed);\n  };\n\n  const updateSortType = (type: SortType) => {\n    setType(type);\n  };\n\n  const handleReset = () => {\n    setReversed(false);\n    setType(SortType.NONE);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info ',\n            { 'is-light': sortType !== SortType.ALPABET },\n          )}\n          onClick={() => updateSortType(SortType.ALPABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={() => updateSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            { 'is-light': isReversed === false },\n          )}\n          onClick={handleReverse}\n        >\n          Reverse\n        </button>\n\n        {(sortType !== SortType.NONE || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n      <ul>\n        {getReorderedGoods(goodsFromServer, { isReversed, sortType })\n          .map((good) => (\n            <li\n              key={good}\n              data-cy=\"Good\"\n            >\n              {good}\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}